{"version":3,"sources":["api.ts","routes/Coins.tsx","routes/Chart.tsx","routes/Price.tsx","routes/Coin.tsx","Router.tsx","App.tsx","index.tsx","theme.ts"],"names":["BASE_URL","fetchCoins","fetch","then","response","json","Container","styled","div","Header","header","CoinsList","ul","Coin","li","props","theme","bgColor","accentColor","Title","h1","Loader","Img","img","Coins","useQuery","isLoading","data","Helmet","slice","map","coin","to","pathname","id","state","name","src","symbol","toLowerCase","Chart","coinId","endDate","Math","floor","Date","now","startDate","fetchCoinHistory","refetchInterval","type","series","price","close","options","mode","chart","height","width","toolbar","show","background","grid","stroke","curve","yaxis","xaxis","axisTicks","axisBorder","labels","categories","time_close","fill","gradient","gradientToColors","stops","colors","tooltip","y","formatter","value","toFixed","Price","fetchCoinPrice","rowData","Changed","quotes","USD","percent_change_15m","percent_change_30m","percent_change_1h","percent_change_6h","percent_change_24h","percent_change_30d","className","style","field","Overview","OverviewItem","Description","p","Tabs","Tab","span","isActive","textColor","Button","button","useParams","useLocation","priceMatch","useRouteMatch","chartMatch","fetchCoinInfo","infoLoading","infoData","fetchCoinTickers","tickersLoading","tickersData","loading","first_data_at","rank","description","total_supply","max_supply","path","last_updated","Router","basename","process","GlobalStyle","createGlobalStyle","App","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.32160ac3.chunk.js","sourcesContent":["\nconst BASE_URL = `https://api.coinpaprika.com/v1`\n\nexport function fetchCoins(){\n    return fetch(`${BASE_URL}/coins`).then((response) => response.json());\n}\n\nexport function fetchCoinInfo(coinId:string) {\n    return fetch(`${BASE_URL}/coins/${coinId}`).then((response) => response.json());\n}\n\nexport function fetchCoinTickers(coinId:string) {\n    return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) => response.json());\n}\n\nexport function fetchCoinHistory(coinId:string) {\n    const endDate = Math.floor(Date.now() / 1000); // ms / 1000\n    const startDate = endDate - 60 * 60 * 24  * 7 * 2 ; // Bring to data 2 weeks before\n    return fetch(`${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`\n    ).then((response) => response.json());\n}\n\nexport function fetchCoinPrice(coinId:string){\n    return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) => response.json());\n}","import { useState, useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useQuery } from \"react-query\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { fetchCoins } from \"../api\";\n\nconst Container = styled.div`\n    padding : 0px 20px; \n    max-width : 480px;\n    margin : 0 auto;\n`;\n\nconst Header = styled.header`\n    height: 10vh;\n    display: flex;\n    justify-content : center;\n    align-items: center;\n`;\n\nconst CoinsList = styled.ul``;\n\nconst Coin = styled.li`\n    background-color : white;\n    color : ${props => props.theme.bgColor};\n    border-radius : 15px;\n    margin-bottom : 10px;\n    a {\n        display : flex;\n        align-items : center;\n        padding : 20px;\n        transition : color 0.2s ease-in;\n    }\n    &:hover {\n        a {\n            color : ${props => props.theme.accentColor};\n        }\n    }\n`;\n\nconst Title = styled.h1`\n    font-size : 48px;\n    color : ${props => props.theme.accentColor};\n`;\n\nconst Loader = styled.div`\n    font-size : 20px;\n    text-align : center; \n    display : block;\n`;\n\nconst Img = styled.img`\n    width : 30px;\n    height : 30px;\n    margin-right : 10px;\n`;\n\ninterface ICoin {\n    id: string,\n    name: string,\n    symbol: string,\n    rank: number,\n    is_new: boolean,\n    is_active: boolean,\n    type: string,\n}\n\nfunction Coins() {\n    // const [coins, setCoins] = useState<ICoin[]>([]);\n    // const [loading, setLoading] = useState(true);\n    // useEffect(() => {\n    //     (async() => {\n    //        const response = await fetch(\"https://api.coinpaprika.com/v1/coins\");\n    //        const json = await response.json();\n    //        setCoins(json.slice(0, 100));\n    //        setLoading(false);\n    //     })();\n    // }, []);\n    // console.log(coins);\n    const { isLoading, data } = useQuery<ICoin[]>(\"allCoins\", fetchCoins)\n    return (\n        <Container>\n            <Helmet>\n                <title>SeobisCoins</title>\n            </Helmet>\n            <Header>\n                <Title>SeobisCoins</Title>\n            </Header>\n            {isLoading ? <Loader>Now Loading ... </Loader> : <CoinsList>\n                {data?.slice(0, 100).map((coin) => <Coin key={coin.id}>\n                    <Link to={{\n                        pathname: `/${coin.id}`,\n                        state: { name:coin.name },\n\n                    }}>\n                    <Img src={`http://cryptoicon-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`}/>\n                            {coin.name} &rarr;\n                        </Link>\n                </Coin>)}\n            </CoinsList>}\n        </Container>\n    );\n}\n\nexport default Coins;","import { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexChart from 'react-apexcharts';\n\ninterface IHistorical {\n    time_open: string;\n    time_close: string;\n    open: number;\n    high: number;\n    low: number;\n    close: number;\n    volume: number;\n    market_cap: number;\n}\n\ninterface ChartProps {\n    coinId : string;\n}\n\nfunction Chart({ coinId }:ChartProps) {\n    const { isLoading, data } = useQuery<IHistorical[]>([\"ohlcv\", coinId], () => fetchCoinHistory(coinId),\n    {\n        refetchInterval : 10000, // refetch interval data 10000 ms\n    }\n    );\n    return (\n        <div>{isLoading ? \"Loading chart...\" : (\n        <ApexChart \n        type='line' \n        series={[\n            {\n                name: 'Price',\n                data: data?.map((price) => price.close),\n            },\n        ]}\n        options={{\n            theme: {\n                mode: \"dark\",\n            },\n            chart : {\n                height : 300,\n                width : 500,\n                toolbar : {\n                    show : false,\n                },\n                background : \"transparent\",\n            },\n            grid : {show: false},\n            stroke : {\n                curve: \"smooth\",\n                width: 3,\n            },\n            yaxis : {show: false},\n            xaxis : {\n                axisTicks : {\n                    show : false,\n                },\n                axisBorder : {\n                    show : false,\n                },\n                labels : {\n                    show : false,\n                },\n                type : \"datetime\",\n                categories : data?.map((price) => price.time_close),\n            },\n            fill : {\n                type : \"gradient\",\n                gradient : {\n                    gradientToColors : [\"#0be881\"],\n                    stops : [0, 100],\n                },\n            },\n            colors : [\"#0fbcf9\"],\n            tooltip : {\n                y : {\n                    formatter: (value) => `$${value.toFixed(2)}`,\n                },\n            },\n        }}/>)}</div>\n    );\n}\nexport default Chart;","import { useQuery } from \"react-query\";\nimport { fetchCoinPrice } from \"../api\";\nimport {AgGridColumn, AgGridReact} from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham-dark.css';\n\n\ninterface IPrice {\n    id : string;\n    name : string;\n    symbol : string;\n    rank : number;\n    circulating_supply : number;\n    total_supply : number;\n    max_supply : number;\n    beta_value : number;\n    first_data_at : string;\n    last_updated : string;\n    quotes : {\n        USD : {\n            ath_date: string;\n            ath_price: number;\n            market_cap: number;\n            market_cap_change_24h: number;\n            percent_change_1h: number;\n            percent_change_1y: number;\n            percent_change_6h: number;\n            percent_change_7d: number;\n            percent_change_12h: number;\n            percent_change_15m: number;\n            percent_change_24h: number;\n            percent_change_30d: number;\n            percent_change_30m: number;\n            percent_from_price_ath: number;\n            price: number;\n            volume_24h: number;\n            volume_24h_change_24h: number;\n        }\n    };\n}\n\ninterface PriceProps {\n    coinId : string;\n};\n\nfunction Price({coinId}:PriceProps) {\n    const { isLoading, data } = useQuery<IPrice>([\"PriceData\", coinId], () => fetchCoinPrice(coinId),\n    {\n        refetchInterval : 10000, // refetch interval data 10000 ms\n    }\n    );\n    const rowData = [\n        {Changed: \" 15Minute\", Price: `$${data?.quotes.USD.percent_change_15m}`},\n        {Changed: \" 30Minute\", Price: `$${data?.quotes.USD.percent_change_30m}`},\n        {Changed: \" 1Hour\", Price: `$${data?.quotes.USD.percent_change_1h}`},\n        {Changed: \" 6Hour\", Price: `$${data?.quotes.USD.percent_change_6h}`},\n        {Changed: \" 24Hour\", Price: `$${data?.quotes.USD.percent_change_24h}`},\n        {Changed: \" 30Days\", Price: `$${data?.quotes.USD.percent_change_30d}`},\n    ];\n    return (\n        <div>{isLoading ? \"Loading Price...\" : (\n            <div className=\"ag-theme-balham-dark\" style={{height: 300, width: 430}}>\n                <AgGridReact\n                    rowData={rowData}>\n                    <AgGridColumn field=\"Changed\"></AgGridColumn>\n                    <AgGridColumn field=\"Price\"></AgGridColumn>\n                </AgGridReact>\n            </div>\n        )}\n       </div>\n    );\n};\n\nexport default Price;","import { useState, useEffect } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { Switch, Route, Link, useLocation, useParams, useRouteMatch } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { fetchCoinInfo, fetchCoinTickers } from \"../api\";\nimport Chart from \"./Chart\";\nimport Price from \"./Price\";\nimport { Helmet } from \"react-helmet\";\n\nconst Container = styled.div`\n    padding : 0px 20px;\n    max-width : 480px;\n    margin : 0 auto;\n`;\n\nconst Header = styled.header`\n    height: 10vh;\n    display: flex;\n    justify-content : center;\n    align-items: center;\n`;\n\nconst Overview = styled.div`\n    display : flex;\n    justify-content: space-between;\n    background-color : rgba(0,0,0,0.5);\n    padding : 10px 20px;\n    border-radius: 10px;\n`;\n\nconst OverviewItem = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    span: first-child {\n        font-size : 10px;\n        font-weight : 400;\n        text-transform : uppercase;\n        margin-bottom : 5px;\n    }\n`;\n\nconst Description = styled.p`\n    margin : 20px 0px;\n`;\n\nconst Tabs = styled.div`\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    margin: 25px 0px;\n    gap: 10px;\n`;\n\nconst Tab = styled.span<{isActive:boolean}>`\n    text-align: center;\n    text-transform: uppercase;\n    font-size: 12px;\n    font-weight: 400;\n    background-color : rgba(0, 0, 0, 0.5);\n    padding: 7px 0px;\n    border-radius: 10px;\n    color: ${(props) => props.isActive ? props.theme.accentColor : props.theme.textColor};\n    a {\n        display: block;\n    }\n`;\n\nconst Title = styled.h1`\n    font-size : 48px;\n    color : ${props => props.theme.accentColor};\n`;\n\nconst Loader = styled.div`\n    font-size : 20px;\n    text-align : center; \n    display : block;\n`;\n\nconst Img = styled.img`\n    width : 30px;\n    height : 30px;\n    margin-right : 10px;\n`;\n\nconst Button = styled.button`\n    margin : 0px 15px;\n    display : flex;\n    font-size : 20px;\n    background-color : rgba(0, 0, 0, 0.5);\n    border-radius : 10px;\n    color: ${props => props.theme.textColor}\n`;\n\ninterface RouteParams {\n    coinId:string;\n}\n\ninterface RouteState {\n    name : string;\n}\n\ninterface InfoData {\n    id : string;\n    name : string;\n    symbol : string;\n    rank : number;\n    is_new : boolean;\n    is_active : boolean;\n    type : string;\n    contract : string;\n    platform : string;\n    description : string;\n    message : string;\n    open_source : boolean;\n    started_at : string;\n    development_status : string;\n    hardware_wallet : boolean;\n    proof_type : string;\n    org_structure : string;\n    hash_algorithm : string;\n    first_data_at : string;\n    last_data_at : string;\n}\n\ninterface PriceData {\n    id : string;\n    name : string;\n    symbol : string;\n    rank : number;\n    circulating_supply : number;\n    total_supply : number;\n    max_supply : number;\n    beta_value : number;\n    first_data_at : string;\n    last_updated : string;\n    quotes : {\n        USD : {\n            ath_date: string;\n            ath_price: number;\n            market_cap: number;\n            market_cap_change_24h: number;\n            percent_change_1h: number;\n            percent_change_1y: number;\n            percent_change_6h: number;\n            percent_change_7d: number;\n            percent_change_12h: number;\n            percent_change_15m: number;\n            percent_change_24h: number;\n            percent_change_30d: number;\n            percent_change_30m: number;\n            percent_from_price_ath: number;\n            price: number;\n            volume_24h: number;\n            volume_24h_change_24h: number;\n        }\n    };\n}\n\nfunction Coin() {\n    const { coinId } = useParams<RouteParams>();\n    const { state } = useLocation<RouteState>();\n    const priceMatch = useRouteMatch(\"/:coinId/price\");\n    const chartMatch = useRouteMatch(\"/:coinId/chart\");\n    const { isLoading: infoLoading, data: infoData } = useQuery<InfoData>(['info', coinId], () => fetchCoinInfo(coinId));\n    const { isLoading: tickersLoading, data: tickersData } = useQuery<PriceData>(['tickers', coinId], () => fetchCoinTickers(coinId),\n    {\n        refetchInterval: 5000, // refetch Interval data 5000 ms\n    }\n    );\n    // const [loading, setLoading] = useState(true);\n    // const [info, setInfo] = useState<InfoData>();\n    // const [priceInfo, setPriceInfo] = useState<PriceData>();\n    // useEffect(() => {\n    //     (async () => {\n    //         const infoData = await (await fetch(`https://api.coinpaprika.com/v1/coins/${coinId}`)).json();\n    //         console.log(infoData);\n    //         const priceData = await (\n    //             await fetch(`http://api.coinpaprika.com/v1/tickers/${coinId}`)\n    //         ).json();\n    //         console.log(priceData);\n    //         setInfo(infoData);\n    //         setPriceInfo(priceData);\n    //         setLoading(false);\n    //     })();\n    // }, [coinId])\n    const loading = infoLoading || tickersLoading;\n    return (\n        <Container>\n            <Helmet>\n                <title>\n                    {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\n                </title>\n            </Helmet>\n            <Header>\n                <Link to=\"/\"><Button>⎋</Button></Link>\n                <Title>\n                    {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\n                </Title>\n            </Header>\n            {loading ? <Loader>Now Loading ... </Loader> : (\n                <>\n                <Description>First Create Date : {tickersData?.first_data_at}</Description>\n                <Overview>\n                    <OverviewItem>\n                        <span>Rank</span>\n                        <span>{infoData?.rank}</span>\n                    </OverviewItem>\n                    <OverviewItem>\n                        <span>Symbol</span>\n                        <span>{infoData?.symbol}</span>\n                    </OverviewItem>\n                    <OverviewItem>\n                        <span>Price</span>\n                        <span>${tickersData?.quotes.USD.price}</span> \n                    </OverviewItem>\n                </Overview>\n                <Description>{infoData?.description}</Description>\n                <Overview>\n                    <OverviewItem>\n                        <span>Total Supply</span>\n                        <span>{tickersData?.total_supply}</span>\n                    </OverviewItem>\n                    <OverviewItem>\n                    <Img src={`http://cryptoicon-api.vercel.app/api/icon/${infoData?.symbol.toLowerCase()}`}/>\n                    </OverviewItem>\n                    <OverviewItem>\n                        <span>Max Supply</span>\n                        <span>{tickersData?.max_supply}</span>\n                    </OverviewItem>\n                </Overview>\n                <Tabs>\n                    <Tab isActive={chartMatch !== null}>\n                        <Link to={`/${coinId}/chart`}>\n                            Chart\n                        </Link>\n                    </Tab>\n                    <Tab isActive={priceMatch !== null}>\n                        <Link to={`/${coinId}/price`}>\n                            Price\n                        </Link>\n                    </Tab>\n                </Tabs>\n                <Switch>\n                    <Route path={`/:coinId/price`}>\n                        <Price coinId={coinId}/>\n                    </Route>\n                    <Route path={`/:coinId/chart`}>\n                        <Chart coinId={coinId}/>\n                    </Route>\n                </Switch>\n                <Description>Last Update : {tickersData?.last_updated}</Description>\n                </>\n            )}\n        </Container>\n    );\n}\nexport default Coin;","import {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport Coins from './routes/Coins';\nimport Coin from './routes/Coin';\n\nfunction Router() {\n    return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n            <Route path=\"/:coinId\">\n                <Coin />\n            </Route>\n            <Route path=\"/\">\n                <Coins />\n            </Route>\n        </Switch>\n    </BrowserRouter>);\n}\nexport default Router;","import React, { useState } from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport Router from './Router';\nimport { ReactQueryDevtools } from 'react-query/devtools'\n\n//Reset CSS \nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\n  html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,\n  small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,\n  aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,\n  nav,output,ruby,section,summary,time,mark,audio,video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article,aside,details,figcaption,figure,footer,header,hgroup,menu,\n  nav,section {\n    display: block;\n  }\n  ol,\n  ul {\n    list-style: none;\n  }\n  blockquote,\n  q {\n    quotes: none;\n  }\n  blockquote:before,\n  blockquote:after,\n  q:before,\n  q:after {\n    content: \"\";\n    content: none;\n  }\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n  input:focus {\n    outline: none;\n  }\n  * {\n    box-sizing : border-box;\n  }\n  a {\n    color: inherit;\n    text-decoration: none;\n  }\n  body {\n    line-height: 1;\n    font-family : 'Source Sans Pro', sans-serif;\n    background-color : ${props => props.theme.bgColor};\n    color : ${props => props.theme.textColor};\n  }\n`;\n\nfunction App() {\n  return (\n    <>\n\n      <GlobalStyle/>\n\n      <Router />\n\n      {/* <ReactQueryDevtools initialIsOpen={true}/> */}\n\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { ThemeProvider } from 'styled-components';\nimport App from './App';\nimport { theme } from './theme';\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider theme={ theme }>\n        <App />\n      </ThemeProvider>\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","import { DefaultTheme } from 'styled-components';\n\nexport const theme:DefaultTheme = {\n    bgColor:\"#2f3640\",\n    textColor:\"#f5f6fa\",\n    accentColor : \"#9c88ff\",\n};\n"],"sourceRoot":""}